use std::str::FromStr;

use crate::syntax::*;

grammar;

pub Type: GradualType = {
    <dom:AtomicType> "->" <cod:Type> => GradualType::fun(dom, cod),
    <AtomicType>,
};

pub AtomicType: GradualType = {
    "dyn" => GradualType::Dyn(),
    "?" => GradualType::Dyn(),
    "bool" => GradualType::Base(BaseType::Bool),
    "int" => GradualType::Base(BaseType::Int),
    "(" <Type> ")",
};

pub Expr: SourceExpr = {
    <Atom>,
    "(" <Expr> ")",
};

pub Atom: SourceExpr = {
    <Const>,
    r"[[:alpha:]][[:alnum:]_']*" => Expr::Var(<>.to_string()),
};

pub Const: SourceExpr = {
    Num => Expr::Const(Constant::Int(<>)),
    Bool => Expr::Const(Constant::Bool(<>)),
};

Num: isize = r"-?[0-9]+" => isize::from_str(<>).unwrap();
Bool: bool = {
    "true" => true,
    "false" => false,
};

match {
    "dyn",
    "?",
    "bool",
    "->",
    "int",
    "true",
    "false",
    "(",
    ")",
} else {
    r"-?[0-9]+",
    r"[[:alpha:]][[:alnum:]_']*"
}